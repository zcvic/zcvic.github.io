import{_ as e,r as o,o as c,c as i,f as l,a as n,b as s,d as t,e as p}from"./app-BTX8nhZh.js";const u="/assets/images/code/front/uniapp/apiManger/HBuilderX_V4z63Qxlh9.png",r="/assets/images/code/front/uniapp/apiManger/HBuilderX_svb7x9BRrS.png",k="/assets/images/code/front/uniapp/apiManger/HBuilderX_dG4LjFZjZo.png",d="/assets/images/code/front/uniapp/apiManger/HBuilderX_lld0yY8lF2.png",m="/assets/images/code/front/uniapp/apiManger/HBuilderX_VEB5KgJaRv.png",v={},g=n("h1",{id:"api集中管理和请求拦截",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#api集中管理和请求拦截"},[n("span",null,"Api集中管理和请求拦截")])],-1),b=n("h2",{id:"luch-request介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#luch-request介绍"},[n("span",null,"luch-request介绍")])],-1),h={href:"https://www.quanzhan.co/luch-request/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.quanzhan.co/luch-request/",target:"_blank",rel:"noopener noreferrer"},y=p(`<p><strong>uni.request</strong></p><p>无法满足项目级开发要求，无拦截器，无自定义api.</p><p>你的使用方式</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$baseUrl <span class="token operator">+</span> <span class="token string">&#39;api/user&#39;</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>Content<span class="token operator">-</span>Type<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">&#39;....&#39;</span><span class="token punctuation">}</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用luch-request后</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user/login&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>	
			<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>
			<span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 此处在函数体外写了async，并且使用了await等待返回，所以可以打印ret结果</span>
		<span class="token comment">// 意味着这里的console.log是等待了几十毫秒请求返回后才执行的</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>api集中管理后</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>
	<span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment">//不携带token</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">//异步请求</span>
	<span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>	
				<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>
				<span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现"><span>具体实现</span></a></h2>`,9),w={href:"https://www.quanzhan.co/luch-request/",target:"_blank",rel:"noopener noreferrer"},x=n("figure",null,[n("img",{src:u,alt:"目录结构",tabindex:"0",loading:"lazy"}),n("figcaption",null,"目录结构")],-1),_=n("p",null,"首先在项目新建一个目录，我这里以common为例子，我习惯将一些工具放在此目录，再新建一个api目录，以及目录下的index.js(全局配置、拦截配置)和api.js(api集中管理)",-1),q=n("figure",null,[n("img",{src:r,alt:"common目录",tabindex:"0",loading:"lazy"}),n("figcaption",null,"common目录")],-1),j={href:"https://www.quanzhan.co/luch-request/",target:"_blank",rel:"noopener noreferrer"},z=p(`<div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Request <span class="token keyword">from</span> <span class="token string">&#39;@/libs/luch-request/luch-request/index.js&#39;</span>

<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost/xxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">//设置请求的base url</span>
	<span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">300000</span><span class="token punctuation">,</span> <span class="token comment">//超时时长5分钟,</span>
	<span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json;&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//自定义参数</span>
	<span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//是否则携带token</span>
		<span class="token literal-property property">toast</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//请求后是否展示错误弹窗</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//请求拦截器</span>
http<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 可使用async await 做异步操作</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>custom<span class="token punctuation">.</span>auth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> token <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			config<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Bearer &#39;</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> config
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 响应拦截器</span>
http<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">title</span><span class="token operator">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> response<span class="token punctuation">.</span>data
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> http
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>api.js（未修改插件源码前）</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@/common/api/index.js&#39;</span>
<span class="token comment">/**
 * @param params - 参数
 * @param config - 局部配置，会覆盖全局配置，局部&gt;全局
 */</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">//这里需要说明一下，get方法的参数，和全局配置都放在了第二个参数里</span>
	<span class="token function-variable function">getTestData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>params<span class="token punctuation">,</span><span class="token operator">...</span>config<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">//post请求中第二项为参数，第三项为配置，有些不同</span>
	<span class="token function-variable function">postTestData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也有办法将get方法修改为post哪样，查看源码</p><figure><img src="`+k+'" alt="Request.js" tabindex="0" loading="lazy"><figcaption>Request.js</figcaption></figure><p>调试之后发现get的参数得放在params里</p><p>修改后：</p><figure><img src="'+d+`" alt="Request.js" tabindex="0" loading="lazy"><figcaption>Request.js</figcaption></figure><p>api.js（修改插件源码后）</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@/common/api/index.js&#39;</span>


<span class="token comment">//修改源码后，传参方式都一样了，个人感觉这样方便一点，看个人选择</span>


<span class="token comment">/**
 * @param params - 参数
 * @param config - 局部配置，会覆盖全局配置，局部&gt;全局
 */</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function-variable function">post</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">put</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">upl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">del</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">getTestData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function-variable function">postTestData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//一定要记得导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.js</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">//需要放在import Vue from &#39;vue&#39;之后</span>
<span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">&#39;@/common/api/api.js&#39;</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>api<span class="token operator">=</span>api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以在任何位置使用this.api.xxx使用了，也会有代码提示</p><figure><img src="`+m+'" alt="代码提示" tabindex="0" loading="lazy"><figcaption>代码提示</figcaption></figure>',14);function B(T,M){const a=o("ExternalLinkIcon");return c(),i("div",null,[l(" more "),g,b,n("p",null,[s("这里用到的插件为"),n("a",h,[s("luch-request"),t(a)])]),n("p",null,[s("为什么要用"),n("a",f,[s("luch-request"),t(a)]),s("?")]),y,n("p",null,[s("首先下载好"),n("a",w,[s("luch-request"),t(a)]),s("，放进项目里，我这里是新建了一个libs 目录放一些插件")]),x,_,q,n("p",null,[s("首先配置index.js，这里只配置一部分可自己根据"),n("a",j,[s("luch-request"),t(a)]),s("文档做出更多配置")]),z])}const V=e(v,[["render",B],["__file","apiManger.html.vue"]]),H=JSON.parse('{"path":"/posts/code/front/uniapp/apiManger.html","title":"Api集中管理和请求拦截","lang":"zh-CN","frontmatter":{"title":"Api集中管理和请求拦截","icon":"api","date":"2024-05-13T00:00:00.000Z","category":["前端","uniapp"],"tag":["api"],"description":"Api集中管理和请求拦截 luch-request介绍 这里用到的插件为luch-request 为什么要用luch-request? uni.request 无法满足项目级开发要求，无拦截器，无自定义api. 你的使用方式 使用luch-request后 api集中管理后 具体实现 首先下载好luch-request，放进项目里，我这里是新建了一个l...","head":[["meta",{"property":"og:url","content":"https://blog.zwymw.top/posts/code/front/uniapp/apiManger.html"}],["meta",{"property":"og:site_name","content":"荒芜"}],["meta",{"property":"og:title","content":"Api集中管理和请求拦截"}],["meta",{"property":"og:description","content":"Api集中管理和请求拦截 luch-request介绍 这里用到的插件为luch-request 为什么要用luch-request? uni.request 无法满足项目级开发要求，无拦截器，无自定义api. 你的使用方式 使用luch-request后 api集中管理后 具体实现 首先下载好luch-request，放进项目里，我这里是新建了一个l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_V4z63Qxlh9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T02:18:59.000Z"}],["meta",{"property":"article:author","content":"荒芜"}],["meta",{"property":"article:tag","content":"api"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-12T02:18:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Api集中管理和请求拦截\\",\\"image\\":[\\"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_V4z63Qxlh9.png\\",\\"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_svb7x9BRrS.png\\",\\"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_dG4LjFZjZo.png\\",\\"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_lld0yY8lF2.png\\",\\"https://blog.zwymw.top/assets/images/code/front/uniapp/apiManger/HBuilderX_VEB5KgJaRv.png\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-12T02:18:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"荒芜\\",\\"url\\":\\"https://blog.zwymw.top\\",\\"email\\":\\"2484068670@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"luch-request介绍","slug":"luch-request介绍","link":"#luch-request介绍","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]}],"git":{"createdTime":1715584344000,"updatedTime":1718158739000,"contributors":[{"name":"荒芜","email":"2484068670@qq.com","commits":8}]},"readingTime":{"minutes":2.73,"words":819},"filePathRelative":"posts/code/front/uniapp/apiManger.md","localizedDate":"2024年5月13日","excerpt":"<!-- more -->\\n<h1>Api集中管理和请求拦截</h1>\\n<h2>luch-request介绍</h2>\\n<p>这里用到的插件为<a href=\\"https://www.quanzhan.co/luch-request/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">luch-request</a></p>\\n<p>为什么要用<a href=\\"https://www.quanzhan.co/luch-request/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">luch-request</a>?</p>","autoDesc":true}');export{V as comp,H as data};
